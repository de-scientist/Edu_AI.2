generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String        @db.VarChar(255)
  email             String        @unique @db.VarChar(255)
  password          String
  createdAt         DateTime      @default(now())
  otpSecret         String?
  userId            String?        @unique
  resetToken        String?       @unique
  resetTokenExpires DateTime?
  emailVerified     Boolean       @default(false)
  verificationCode  String?       @unique
  role              Role          @default(STUDENT)
  interactions      Interaction[]
  loginHistory      LoginHistory?
  progress          Progress[]
  posts             Post[]
  comments          Comment[]
  likes             Like[]
}

model Course {
  id          String     @id @default(uuid())
  title       String
  description String     @db.Text
  platform    String
  url         String
  instructor  String
  duration    String
  level       String
  category    String
  thumbnail   String?
  createdAt   DateTime   @default(now())
  students    Progress[]
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  progress  Float    @default(0.0)
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Interaction {
  id         String   @id @default(uuid())
  userId     String
  lecturerId String?
  message    String
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Analytics {
  id                String   @id @default(uuid())
  totalUsers        Int
  activeUsers       Int
  courseCompletions Int
  timestamp         DateTime @default(now())
}

model Recommendation {
  id                String   @id @default(uuid())
  userId            String
  courseId          String
  courseTitle       String
  courseDescription String?
  courseURL         String
  platform          String
  createdAt         DateTime @default(now())
}

model Student {
  id           String        @id @default(uuid())
  name         String
  points       Int           @default(0)
  badges       Badge[]
  achievements Achievement[] @relation("StudentAchievements")
}

model Badge {
  id        String  @id @default(uuid())
  name      String
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
}

model Question {
  id          String   @id @default(uuid())
  text        String
  options     String[]
  answer      String
  explanation String
}

model StudentPerformance {
  id        String @id @default(uuid())
  studentId String
  topic     String
  score     Int
}

model StudyPlan {
  id        String   @id @default(uuid())
  studentId String
  topic     String
  date      DateTime
}

model StudyGoal {
  id        String  @id @default(uuid())
  studentId String
  goal      String
  completed Boolean @default(false)
}

model Reminder {
  id        String @id @default(uuid())
  studentId String
  message   String
  sendTime  String
  sent      String
}

model Quiz {
  id        String   @id @default(uuid())
  studentId String
  question  String
  options   String[]
  answer    String
}

model Performance {
  id        String @id @default(uuid())
  studentId String
  courseId  String
  topic     String
  score     Int
}

model Gamification {
  id        String   @id @default(uuid())
  studentId String
  xpPoints  Int      @default(0)
  badges    String[]
}

model Achievement {
  id       String    @id @default(uuid())
  name     String
  icon     String
  points   Int
  students Student[] @relation("StudentAchievements")
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String   @unique
  timeStamp DateTime @default(now())
  ipAddress String
  userAgent String
  user      User     @relation(fields: [userId], references: [id])
}

model Resource {
  id          String   @id @default(uuid())
  title       String
  description String
  type        String   // "video" | "article" | "book" | "course"
  url         String   @unique
  category    String
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
}

enum Role {
  STUDENT
  LECTURER
  ADMIN
}

model AIMetrics {
  id          String   @id @default(uuid())
  accuracy    Float
  responseTime Float
  errorRate   Float
  usageCount  Int
  timestamp   DateTime @default(now())
}

model AISettings {
  id                String   @id @default(uuid())
  modelVersion      String
  temperature       Float
  maxTokens         Int
  topP              Float
  frequencyPenalty  Float
  presencePenalty   Float
  systemPrompt      String   @db.Text
  updatedAt         DateTime @updatedAt
}

model ModelParameter {
  id          String   @id @default(uuid())
  name        String
  value       Float
  min         Float
  max         Float
  description String   @db.Text
  modelType   String
  updatedAt   DateTime @updatedAt
}

model ModelTraining {
  id            String   @id @default(uuid())
  modelType     String
  status        String   // "idle" | "training" | "completed" | "error"
  startTime     DateTime @default(now())
  endTime       DateTime?
  accuracy      Float?
  loss          Float?
  totalSamples  Int
  trainingSet   Int
  validationSet Int
  errorMessage  String?  @db.Text
}
